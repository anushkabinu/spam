# -*- coding: utf-8 -*-
"""mail classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mtvwMhRckMYtxOJ60i0C0T5BsjP7BV7e
"""

from google.colab import files
uploaded = files.upload()

df.head()

import pandas as pd

df = pd.read_csv("/content/spam.csv", encoding="ISO-8859-1")
print(df.columns)

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# Load dataset
df = pd.read_csv("/content/spam.csv", encoding="ISO-8859-1")
df = df[['Category', 'Message']].rename(columns={'Category': 'label', 'Message': 'message'})

# Convert labels to binary
df['label'] = df['label'].map({'ham': 0, 'spam': 1})

# Split data
X_train, X_test, y_train, y_test = train_test_split(df['message'], df['label'], test_size=0.2, random_state=42)

# Convert text to numerical features
vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Train classifier
model = LogisticRegression()
model.fit(X_train_tfidf, y_train)

# Predictions
y_pred = model.predict(X_test_tfidf)

# Evaluate
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)
print(f"Accuracy: {accuracy:.4f}")
print(report)

def classify_email(email):
    email_tfidf = vectorizer.transform([email])
    prediction = model.predict(email_tfidf)[0]
    return "Spam" if prediction == "Spam" else "Primary"

# Example usage
email_text = "Hello, I hope you are doing well. Let's catch up soon."
print(f"Email: {email_text}\nClassification: {classify_email(email_text)}")